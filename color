#pragma once
#ifndef PTEST_COLOR_HPP
#define PTEST_COLOR_HPP

#include <string>
#include <iostream>

#define ANSI_COLOR_RED     "\033[31m"
#define ANSI_COLOR_GREEN   "\033[32m"
#define ANSI_COLOR_YELLOW  "\033[33m"
#define ANSI_COLOR_BLUE    "\033[34m"
#define ANSI_COLOR_MAGENTA "\033[35m"
#define ANSI_COLOR_CYAN    "\033[36m"
#define ANSI_COLOR_WHITE   "\033[37m"
#define ANSI_COLOR_RESET   "\033[0m"

#define nullString ""

namespace colors
{
    class ColorPallet
    { public:
        const std::string red = ANSI_COLOR_RED;
        const std::string green = ANSI_COLOR_GREEN;
        const std::string yellow = ANSI_COLOR_YELLOW;
        const std::string blue = ANSI_COLOR_BLUE;
        const std::string magenta = ANSI_COLOR_MAGENTA;
        const std::string cyan = ANSI_COLOR_CYAN;
        const std::string white = ANSI_COLOR_WHITE;
        const std::string resetColors = ANSI_COLOR_RESET;

        std::string getColor(std::string colorName) {
            if (colorName == "red") {
                return this->red;
            } else {
                if (colorName == "green") {
                    return this->green;
                } else {
                    if (colorName == "yellow") {
                        return this->yellow;
                    } else {
                        if (colorName == "blue") {
                            return this->blue;
                        } else {
                            if (colorName == "magenta") {
                                return this->magenta;
                            } else {
                                if (colorName == "cyan") {
                                    return this->cyan;
                                } else {
                                    if (colorName == "white") {
                                        return this->white;
                                    } else {
                                        return this->white;
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    };

    namespace Colored
    {
        std::string returnColored(colors::ColorPallet& colorPallet, char* colorName, std::string string) {
            return colorPallet.getColor(colorName) + string + colorPallet.resetColors;
        }

        void printColored(colors::ColorPallet& colorPallet, char* colorName) {
            std::cout << colors::Colored::returnColored(colorPallet, colorName, nullString);
        }
    }
}

#endif
